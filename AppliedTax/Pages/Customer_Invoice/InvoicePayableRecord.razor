@page "/Customer_Invoice/InvoicePayableRecord/{InvCode}"
@using System.IO;
@using AppliedTax.Codes;
@using System.Data;
@using System.Data.SQLite;
@using System.Text;
@using AppReportClass;
@using Microsoft.AspNetCore.Mvc.RazorPages;
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.Reporting.NETCore;

@inject NavigationManager _navigationManager

<h1>
    Invoice Payable Record
</h1>

@code {

    private bool showDropdown = false;

    private void Dropdown()
    {
        showDropdown = !showDropdown;
    }




    #region Setup Variables


    public TableClass tb_Payable = new("[Payable]");
    public DataTable Myinvoice;
    decimal Amount = 0.00M;
    decimal TaxAmount = 0.00M;
    decimal NetAmount = 0.00M;
    decimal TotQty = 0.00M;
    decimal TotRate = 0.00M;
    decimal TotAmount = 0.00M;
    decimal TotTaxAmount = 0.00M;


    [Parameter]
    public string InvCode { get; set; }
    public Parameters Model { get; set; }
    public string TableName = "Payable";
    public string MyMessage = String.Empty;
    public DataTable Payable = TableClass.GetTable("Payable");
    public DataTable Taxes = TableClass.GetTable("Taxes");
    public DataTable Products = TableClass.GetTable("Product");
    public DataTable CustomerName = TableClass.GetTable("Company");
    public DataRow MyRow { get; set; }
    public string InventoryTitle { get; set; }
    public string CompanyTitle { get; set; }
    public string TaxTitle { get; set; }
    public string PdfFile { get; set; }
    public string ExcelFile { get; set; }
    public string WordFile { get; set; }
    public string HTMLFile { get; set; }
    public bool IsInitializing { get; set; } = true;


    #endregion


    protected override void OnInitialized()
    {
        if (InvCode.Length == 0) { InvCode = string.Empty; }
        MyRow = TableClass.GetRow(TableName, InvCode);
        Model = new();

        if (MyRow != null)
        {
            if (MyRow["ID"] != DBNull.Value)
            {
                Model = new()
                    {
                        ID = (long)MyRow["ID"],
                        InvoiceCode = (string)MyRow["Invoice Code"],
                        InvoiceNumber = (string)MyRow["Invoice Number"],
                        InvoiceDate = (DateTime)MyRow["Invoice Date"],
                        PaymentDate = (DateTime)MyRow["Payment Date"],
                        Inventory = (long)MyRow["Inventory"],
                        Quantity = (long)MyRow["Quantity"],
                        Amount = (decimal)MyRow["Amount"],
                        Rate = (decimal)MyRow["Rate"],
                        TaxAmount = (decimal)MyRow["Tax Amount"],
                        NetAmount = (decimal)MyRow["Net Amount"],
                        CompanyID = (long)MyRow["Company Id"],
                        PSID = (long)MyRow["PSID"],
                        TCID = (long)MyRow["TCID"],
                        OrdID = (long)MyRow["Ord_ID"],
                        TaxID = (long)MyRow["TaxID"]
                    };

                InventoryTitle = TableClass.GetTitle("Product", Model.Inventory);
                CompanyTitle = TableClass.GetTitle("Company", (long)MyRow["Company Id"]);
                TaxTitle = TableClass.GetTitle("Taxes", (long)MyRow["TaxID"]);
                Myinvoice = GetInvoice();
                TotQty = Convert.ToDecimal(Myinvoice.Compute("SUM(Quantity)", ""));
                TotRate = (decimal)Myinvoice.Compute("SUM(Rate)", "");
                TotAmount = (decimal)Myinvoice.Compute("SUM(Amount)", "");
                IsInitializing = false;

            }
        }
    }


    private DataTable GetInvoice()
    {
        tb_Payable = new("Payable");
        tb_Payable.MyDataView.RowFilter = $"[Invoice Code] = '{Model.InvoiceCode}'";
        if (tb_Payable.MyDataView.Count > 0)
        {
            return tb_Payable.MyDataView.ToTable();
        }
        return tb_Payable.MyDataTable.Clone();
    }

    private void Save()
    {
        Model2Row();
        string _TableName = MyRow.Table.TableName;
        long _ID = (long)MyRow["ID"];
        int _Effected;
        TableClass _Table = new("Payable");
        var _Date1 = ((DateTime)MyRow["Invoice Date"]).ToString("yyyy-MM-dd");
        var _Date2 = ((DateTime)MyRow["Payment Date"]).ToString("yyyy-MM-dd");

        string _Filter = $"[ID]={_ID}";
        _Table.MyDataView.RowFilter = _Filter;
        if (_Table.MyDataView.Count == 1)
        {
            var _Command = new SQLiteCommand(ConnectionClass.GetConnected());
            var _Text = new StringBuilder();
            _Text.Append($"UPDATE [{_TableName}] SET ");
            _Text.Append($"ID={MyRow["ID"]}, ");
            _Text.Append($"[Invoice Code]='{MyRow["Invoice Code"]}', ");
            _Text.Append($"[Invoice Number]={MyRow["Invoice Number"]},");
            _Text.Append($"[Invoice Date]='{_Date1}',");
            _Text.Append($"[Payment Date]='{_Date2}',");
            _Text.Append($"Inventory={MyRow["Inventory"]},");
            _Text.Append($"Quantity={MyRow["Quantity"]},");
            _Text.Append($"Amount={MyRow["Amount"]},");
            _Text.Append($"Rate={MyRow["Rate"]},");
            _Text.Append($"[Tax Amount]={MyRow["Tax Amount"]},");
            _Text.Append($"[Net Amount]={MyRow["Net Amount"]},");
            _Text.Append($"[Company Id]={MyRow["Company Id"]},");
            _Text.Append($"PSID={MyRow["PSID"]},");
            _Text.Append($"TCID={MyRow["TCID"]},");
            _Text.Append($"Ord_Id={MyRow["Ord_ID"]},");
            _Text.Append($"TaxID={MyRow["TaxID"]} ");
            _Text.Append($"WHERE [ID]={_ID}");

            _Command = new(_Text.ToString(), ConnectionClass.GetConnected());
            _Effected = _Command.ExecuteNonQuery();
            if (_Effected > 0)
            {
                MyMessage = $"{_Effected} Row(s) effected updated successfully.";
            }

        }
        else
        {
            var _MAXID = (long)tb_Payable.MyDataTable.Compute("MAX(Id)", "") + 1;
            var _Command = new SQLiteCommand(ConnectionClass.GetConnected());
            var _Text = new StringBuilder();
            _Text.Append($"INSERT INTO [{_TableName}] VALUES ({_MAXID},");
            _Text.Append($"'{MyRow["Invoice Code"]}',");
            _Text.Append($"'{MyRow["Invoice Number"]}',");
            _Text.Append($"'{_Date1}',");
            _Text.Append($"'{_Date2}',");
            _Text.Append($"{MyRow["Inventory"]},");
            _Text.Append($"{MyRow["Quantity"]},");
            _Text.Append($"{MyRow["Amount"]},");
            _Text.Append($"{MyRow["Rate"]},");
            _Text.Append($"{MyRow["Tax Amount"]},");
            _Text.Append($"{MyRow["Net Amount"]},");
            _Text.Append($"{MyRow["Company Id"]},");
            _Text.Append($"{MyRow["PSID"]},");
            _Text.Append($"{MyRow["TCID"]},");
            _Text.Append($"{MyRow["Ord_Id"]},");
            _Text.Append($"{MyRow["TaxID"]})");

            try
            {
                _Command = new(_Text.ToString(), ConnectionClass.GetConnected());
                _Effected = _Command.ExecuteNonQuery();
                if (_Effected > 0)
                {
                    MyMessage = $"{_Effected} Row(s) effected inserted successfully.";
                }
            }
            catch (Exception e)
            {
                MyMessage = e.Message;

            }



        }

        Myinvoice = GetInvoice();
    }

    private void Delete(long ID)
    {
        if (ID > 0)
        {

            var TextDelete = "DELETE FROM [Payable] WHERE [ID] = @ID";
            var SQLCommand = new SQLiteCommand(TextDelete, ConnectionClass.GetConnected());
            SQLCommand.Parameters.AddWithValue("@ID", ID);
            var effected = SQLCommand.ExecuteNonQuery();
            if (effected > 0)
            {
                Myinvoice = GetInvoice();
                if (Myinvoice.Rows.Count == 0)
                {
                    _navigationManager.NavigateTo("/Customer_Invoice/InvoicePayable");

                }
                MyMessage = "Record has been deleted successfully";
            }
            else
            {
                MyMessage = "Record not deleted.";
            }
        }
        else
        {
            MyMessage = "Value id not more than zero";
        }
    }

    private void Print()
    {
        DataTable _Table = new();
        ReportParameters rptParameters = new();
        List<ReportParameter> _Parameters = new List<ReportParameter>
        {
                new ReportParameter("CompanyName", "Applied Software House"),
                new ReportParameter("Heading1", CompanyTitle),
                new ReportParameter("Heading2", "Sales Tax Invocies"),
                new ReportParameter("Footer", "Powered by Applied Software House"),
                new ReportParameter("InvoiceCode", InvCode)
        };

        rptParameters.ReportPath = $"{Directory.GetCurrentDirectory()}\\wwwroot\\Reports\\";
        rptParameters.ReportFile = "TaxSample.rdl";
        rptParameters.ReportType = ReportType.Preview;

        rptParameters.OutputFile = "TaxSample";                                                         // Do not Add Extention Type with File name.
        rptParameters.OutputPath = $"{Directory.GetCurrentDirectory()}\\wwwroot\\PrintReports\\";

        rptParameters.ReportData = Myinvoice;
        rptParameters.DataSetName = "DataSet2";

        rptParameters.DataParameters = _Parameters;

        var ReportExport = new ExportReport(rptParameters);

        if (File.Exists($"{rptParameters.ReportPath}{rptParameters.ReportFile}"))
        {
            ReportExport.Render();
            if (ReportExport.Variables.IsSaved)
            {
                ShowReport($"{rptParameters.OutputPath}{rptParameters.OutputFile}{rptParameters.OutputFileExtention}");
                ReportExport = null;
            }
        }
        else
        {
            MyMessage = "Report Not found to print";
        }

    }

    private IActionResult ShowReport(string _ReportPath)
    {
        if (File.Exists(_ReportPath))
        {
            var stream = new FileStream(_ReportPath, FileMode.Open);
            return new FileStreamResult(stream, "application/pdf");
            return new FileStreamResult(stream, "application/xlsx");
            return new FileStreamResult(stream, "application/docx");
            return new FileStreamResult(stream, "application/html");

        }
        return new RedirectResult("/");


    }

    private string GetPDF()
    {
        if (IsInitializing) { return ""; }
        DataTable _Table = new();
        ReportParameters rptParameters = new();
        List<ReportParameter> _Parameters = new List<ReportParameter>
        {
                new ReportParameter("CompanyName", "Applied Software House"),
                new ReportParameter("Heading1", CompanyTitle),
                new ReportParameter("Heading2", "Sales Tax Invocies"),
                new ReportParameter("Footer", "Powered by Applied Software House"),
                new ReportParameter("InvoiceCode", InvCode)
        };

        rptParameters.ReportPath = $"{Directory.GetCurrentDirectory()}\\wwwroot\\Reports\\";
        rptParameters.ReportFile = "TaxSample.rdl";
        rptParameters.ReportType = ReportType.Preview;

        rptParameters.OutputFile = "TaxSample";                                                         // Do not Add Extention Type with File name.
        rptParameters.OutputPath = $"{Directory.GetCurrentDirectory()}\\wwwroot\\PrintReports\\";

        rptParameters.ReportData = Myinvoice;
        rptParameters.DataSetName = "DataSet2";

        rptParameters.DataParameters = _Parameters;

        var ReportExport = new ExportReport(rptParameters);


        // if report rdl file exist then work.
        if (File.Exists($"{rptParameters.ReportPath}{rptParameters.ReportFile}"))
        {
            ReportExport.Render();
            if (ReportExport.Variables.IsSaved)
            {
                PdfFile = $"./PrintReports/{rptParameters.OutputFile}{rptParameters.OutputFileExtention}";
                return PdfFile;
            }
        }
        else
        {
            MyMessage = "Report Not found to print";
        }
        return PdfFile;
    }

    private string GetExcel()
    {
        if (IsInitializing) { return ""; }                         // Return if button is in intializing.

        DataTable _Table = new();
        ReportParameters rptParameters = new();
        List<ReportParameter> _Parameters = new List<ReportParameter>
        {
                new ReportParameter("CompanyName", "Applied Software House"),
                new ReportParameter("Heading1", CompanyTitle),
                new ReportParameter("Heading2", "Sales Tax Invocies"),
                new ReportParameter("Footer", "Powered by Applied Software House"),
                new ReportParameter("InvoiceCode", InvCode)
        };

        rptParameters.ReportPath = $"{Directory.GetCurrentDirectory()}\\wwwroot\\Reports\\";
        rptParameters.ReportFile = "TaxSample.rdl";
        rptParameters.ReportType = ReportType.Excel;

        rptParameters.OutputFile = "TaxSample";                                                         // Do not Add Extention Type with File name.
        rptParameters.OutputPath = $"{Directory.GetCurrentDirectory()}\\wwwroot\\PrintReports\\";

        rptParameters.ReportData = Myinvoice;
        rptParameters.DataSetName = "DataSet2";

        rptParameters.DataParameters = _Parameters;

        var ReportExport = new ExportReport(rptParameters);


        // if report rdl file exist then work.
        if (File.Exists($"{rptParameters.ReportPath}{rptParameters.ReportFile}"))
        {
            ReportExport.Render();
            if (ReportExport.Variables.IsSaved)
            {
                ExcelFile = $"./PrintReports/{rptParameters.OutputFile}{rptParameters.OutputFileExtention}";
                return ExcelFile;
            }
        }
        else
        {
            MyMessage = "Report Not found to print";
        }
        return ExcelFile;
    }

    private string GetWord()
    {
        if (IsInitializing) { return ""; }                         // Return if button is in intializing.

        DataTable _Table = new();
        ReportParameters rptParameters = new();
        List<ReportParameter> _Parameters = new List<ReportParameter>
        {
                new ReportParameter("CompanyName", "Applied Software House"),
                new ReportParameter("Heading1", CompanyTitle),
                new ReportParameter("Heading2", "Sales Tax Invocies"),
                new ReportParameter("Footer", "Powered by Applied Software House"),
                new ReportParameter("InvoiceCode", InvCode)
        };

        rptParameters.ReportPath = $"{Directory.GetCurrentDirectory()}\\wwwroot\\Reports\\";
        rptParameters.ReportFile = "TaxSample.rdl";
        rptParameters.ReportType = ReportType.Word;

        rptParameters.OutputFile = "TaxSample";                                                         // Do not Add Extention Type with File name.
        rptParameters.OutputPath = $"{Directory.GetCurrentDirectory()}\\wwwroot\\PrintReports\\";

        rptParameters.ReportData = Myinvoice;
        rptParameters.DataSetName = "DataSet2";

        rptParameters.DataParameters = _Parameters;

        var ReportExport = new ExportReport(rptParameters);


        // if report rdl file exist then work.
        if (File.Exists($"{rptParameters.ReportPath}{rptParameters.ReportFile}"))
        {
            ReportExport.Render();
            if (ReportExport.Variables.IsSaved)
            {
                WordFile = $"./PrintReports/{rptParameters.OutputFile}{rptParameters.OutputFileExtention}";
                return WordFile;
            }
        }
        else
        {
            MyMessage = "Report Not found to print";
        }
        return WordFile;
    }
    private string GetHTML()
    {
        if (IsInitializing) { return ""; }                         // Return if button is in intializing.

        DataTable _Table = new();
        ReportParameters rptParameters = new();
        List<ReportParameter> _Parameters = new List<ReportParameter>
        {
                new ReportParameter("CompanyName", "Applied Software House"),
                new ReportParameter("Heading1", CompanyTitle),
                new ReportParameter("Heading2", "Sales Tax Invocies"),
                new ReportParameter("Footer", "Powered by Applied Software House"),
                new ReportParameter("InvoiceCode", InvCode)
        };

        rptParameters.ReportPath = $"{Directory.GetCurrentDirectory()}\\wwwroot\\Reports\\";
        rptParameters.ReportFile = "TaxSample.rdl";
        rptParameters.ReportType = ReportType.HTML;

        rptParameters.OutputFile = "TaxSample";                                                         // Do not Add Extention Type with File name.
        rptParameters.OutputPath = $"{Directory.GetCurrentDirectory()}\\wwwroot\\PrintReports\\";

        rptParameters.ReportData = Myinvoice;
        rptParameters.DataSetName = "DataSet2";

        rptParameters.DataParameters = _Parameters;

        var ReportExport = new ExportReport(rptParameters);


        // if report rdl file exist then work.
        if (File.Exists($"{rptParameters.ReportPath}{rptParameters.ReportFile}"))
        {
            ReportExport.Render();
            if (ReportExport.Variables.IsSaved)
            {
                HTMLFile = $"./PrintReports/{rptParameters.OutputFile}{rptParameters.OutputFileExtention}";
                return HTMLFile;
            }
        }
        else
        {
            MyMessage = "Report Not found to print";
        }
        return HTMLFile;
    }

    private void Add()
    {
        Model.ID = 0;
        Model.Inventory = 0;
        Model.Quantity = 0;
        Model.Rate = 0.00M;
        Model.Amount = 0.00M;
        Model.TaxID = 0;
        Model.TaxAmount = 0.00m;
        Model.NetAmount = 0.00m;
        InventoryTitle = "";

    }

    private void Model2Row()
    {
        MyRow["ID"] = Model.ID;
        MyRow["Invoice Code"] = Model.InvoiceCode;
        MyRow["Invoice Number"] = Model.InvoiceNumber;
        MyRow["Invoice Date"] = Model.InvoiceDate;
        MyRow["Payment Date"] = Model.PaymentDate;
        MyRow["Inventory"] = Model.Inventory;
        MyRow["Quantity"] = Model.Quantity;
        MyRow["Amount"] = Model.Amount;
        MyRow["Rate"] = Model.Rate;
        MyRow["Tax Amount"] = Model.TaxAmount;
        MyRow["Net Amount"] = Model.NetAmount;
        MyRow["Company Id"] = Model.CompanyID;
        MyRow["PSID"] = Model.PSID;
        MyRow["TCID"] = Model.TCID;
        MyRow["Ord_Id"] = Model.OrdID;
        MyRow["TaxID"] = Model.TaxID;

    }

    private void Submit()
    {
        var a = Model.InvoiceNumber;
    }

    private void CalculateNetAmount()
    {
        Model.Amount = Model.Quantity * Model.Rate;
        Model.TaxAmount = Model.Amount * TableClass.GetTaxRare(Model.TaxID);
        Model.NetAmount = Model.Amount + Model.TaxAmount;
    }

    private void Edit(long ID)
    {
        tb_Payable.MyDataView.RowFilter = $"ID={ID}";
        if (tb_Payable.MyDataView.Count == 1)
        {
            MyRow = tb_Payable.MyDataView[0].Row;
            Model = new()
                {
                    ID = (long)MyRow["ID"],
                    InvoiceCode = (string)MyRow["Invoice Code"],
                    InvoiceNumber = (string)MyRow["Invoice Number"],
                    InvoiceDate = (DateTime)MyRow["Invoice Date"],
                    PaymentDate = (DateTime)MyRow["Payment Date"],
                    Inventory = (long)MyRow["Inventory"],
                    Quantity = (long)MyRow["Quantity"],
                    Amount = (decimal)MyRow["Amount"],
                    Rate = (decimal)MyRow["Rate"],
                    TaxAmount = (decimal)MyRow["Tax Amount"],
                    NetAmount = (decimal)MyRow["Net Amount"],
                    CompanyID = (long)MyRow["Company Id"],
                    PSID = (long)MyRow["PSID"],
                    TCID = (long)MyRow["TCID"],
                    OrdID = (long)MyRow["Ord_ID"],
                    TaxID = (long)MyRow["TaxID"]
                };
        }
        else
        {
            MyMessage = "Record not Found";
        }
    }



    #region Variables
    public class Parameters
    {
        public long ID { get; set; }
        public string InvoiceCode { get; set; }
        public string InvoiceNumber { get; set; }
        public DateTime InvoiceDate { get; set; }
        public DateTime PaymentDate { get; set; }
        public long Inventory { get; set; }
        public long Quantity { get; set; }
        public decimal Amount { get; set; }
        public decimal Rate { get; set; }
        public decimal TaxRate { get; set; }
        public long TaxID { get; set; }
        public decimal TaxAmount { get; set; }
        public decimal NetAmount { get; set; }
        public long CompanyID { get; set; }
        public long PSID { get; set; }
        public long TCID { get; set; }
        public long OrdID { get; set; }
    }
    #endregion

}

@MyMessage;


<div class="container">
    <EditForm Model="@Model" OnSubmit="@Submit">
        <input hidden id="txtID" />
        <div class="row mt-2">
            <div class="col-md-12">
                <input hidden id="txtID" />
                <div class="input-group">
                    <label class="input-group-text" for="inputGroupSelect01">Customer Name</label>
                    <select class="form-select" id="inputGroupSelect01" @bind="@Model.CompanyID">
                        <option selected>@CompanyTitle</option>
                        @foreach (DataRow Row in CustomerName.Rows)
                        {
                            <option value="@Row["ID"]"> @Row["Title"] </option>
                        }
                    </select>
                </div>
            </div>
        </div>
        <div class="row mt-2">
            <div class="col-md-3">
                <label>Invoice Code</label>
                <InputText @bind-Value="Model.InvoiceCode" class="form-control" data-val="true" data-val-required="The InvoiceCode field is required." id="txtCode"></InputText>

            </div>
            <div class="col-md-3">
                <label>Invoice Number</label>
                <InputText @bind-Value="Model.InvoiceNumber" class="form-control" data-val="true" data-val-required="The InvoiceNumber field is required." id="txtNumber"></InputText>

            </div>
            <div class="col-md-3">
                <label>Invoice Date</label>
                <InputDate @bind-Value="Model.InvoiceDate" class="form-control" data-val="true" data-val-required="The InvoiceDate field is required." id="txtDate"></InputDate>

            </div>
            <div class="col-md-3">
                <label>Payment Date</label>
                <InputDate @bind-Value="Model.PaymentDate" class="form-control" data-val="true" data-val-required="The PaymentDate field is required." id="txtDate"></InputDate>
            </div>
        </div>
        <div class="row mt-2">
            <div class="col-md-3">

                <div class="input-group mb-3 mt-4">
                    <label class="input-group-text" for="inputGroupSelect01">Inventory</label>
                    <select class="form-select" id="inputGroupSelect01" @bind="@Model.CompanyID">
                        <option selected>@InventoryTitle</option>
                        @foreach (DataRow Row in Products.Rows)
                        {
                            <option value="@Row["ID"]"> @Row["Title"] </option>
                        }
                    </select>
                </div>
            </div>
            <div class="col-md-3">
                <label>Quantity</label>
                <InputNumber @bind-Value="Model.Quantity" @onblur="CalculateNetAmount" step=".01" class="form-control" data-val="true" data-val-required="The Quantity field is required." id="txtQuantity"></InputNumber>
            </div>
            <div class="col-md-3">
                <label>Rate</label>
                <InputNumber @bind-Value="Model.Rate" @onblur="CalculateNetAmount" step=".01" class="form-control" data-val="true" data-val-required="The Rate field is required." id="txtRate"></InputNumber>
            </div>
            <div class="col-md-3">
                <label>Amount</label>
                <InputNumber @bind-Value="Model.Amount" readonly step=".01" class="form-control" data-val="true" data-val-required="The Amount field is required." id="txtAmount"></InputNumber>
            </div>
        </div>
        <div class="row mt-2">
            <div class="col-md-3">
                <div class="input-group mb-3 mt-4">
                    <label class="input-group-text" for="inputGroupSelect01">Tax Category</label>
                    <InputSelect class="form-select" id="inputTaxes" @bind-Value="Model.TaxID">
                        <option selected>Choose...</option>
                        @foreach (DataRow Row in Taxes.Rows)
                        {
                            <option value="@Row["ID"]"> @Row["Title"] </option>
                        }
                    </InputSelect>
                </div>
            </div>
            <div class="col-md-3">
                <label>Tax Amount</label>
                <InputNumber @bind-Value="Model.TaxAmount" step=".01" class="form-control" data-val="true" data-val-required="The TaxAmount field is required." id="txtTaxAmount"></InputNumber>

            </div>
            <div class="col-md-3">
                <label>Net Amount</label>
                <InputNumber @bind-Value="Model.NetAmount" step=".01" class="form-control" data-val="true" data-val-required="The NetAmount field is required." id="txtNetAmount"></InputNumber>
            </div>
        </div>
        <div class="row mt-2 mb-2 justify-content-center">

            <button type="button" @onclick="Save" class="btn btn-success">Save</button>
            <a class="btn btn-warning" href=@GetPDF() target="blank">Print</a>
            @* <button type="button" @onclick="Print" class="btn btn-warning">Click</button>
            <button class="btn btn-warning" type="button" href=@GetPDF target="blank">Print</button>*@
             <a class="btn btn-info" href="/Customer_Invoice/InvoicePayable">Back</a>

            <button class="btn btn-warning" @onclick="Dropdown">
                Print
            </button>
            @if (showDropdown)
            {
                <ul class="dropdown-menu show" data-popper-placement="bottom-start">
                    <li><a class="btn border-0" href=@GetPDF target="_blank">Preview</a></li>
                    <li><a class="btn border-0" href=@GetPDF target="_blank">PDF</a></li>
                    <li><a class="btn border-0" href=@GetExcel target="_blank">Excel</a></li>
                    <li><a class="btn border-0" href=@GetWord target="_blank">Word</a></li>
                    <li><a class="btn border-0" href=@GetHTML target="_blank">HTML</a></li>
                    @*<li><button class="btn border-0">HTML</button></li>*@
                </ul>


            }
        </div>
    </EditForm>

</div>

<div class="container">
    <table class="custom-table">
        <thead>
            <tr>
                <th>Inv No.</th>
                <th>Inventory</th>
                <th>Inv Date</th>
                <th>Payment Date</th>
                <th>Qty</th>
                <th>Rate</th>
                <th>Amount</th>
                <th>Tax Amount</th>
                <th>Net Amount</th>
                <th><button class="btn btn-success btn-By" @onclick="Add"><i class="bi bi-plus"></i></button></th>
                <th></th>
            </tr>
        </thead>

        <tbody>
            @if (Myinvoice != null)
            {
                @foreach (DataRow Row in Myinvoice.Rows)
                {
                    var _StockTitle = TableClass.GetTitle("Product", (long)Row["Inventory"]);
                    var _Date1 = ((DateTime)Row["Invoice Date"]).ToString("dd-MMM-yyy");
                    var _Date2 = ((DateTime)Row["Payment Date"]).ToString("dd-MMM-yyy");
                    var _Quantity = ((long)Row["Quantity"]).ToString("###,###,###.##");
                    var _Rate = ((decimal)Row["Rate"]).ToString("###,###,###.##");
                    var _Amount = ((decimal)Row["Amount"]).ToString("###,###,###.##");
                    var _TaxAmount = ((decimal)Row["Tax Amount"]).ToString("###,###,###.##");
                    var _NetAmount = ((decimal)Row["Net Amount"]).ToString("###,###,###.##");


                    <tr>
                        <td>@Row["Invoice Number"]</td>
                        <td>@_StockTitle</td>
                        <td>@_Date1</td>
                        <td>@_Date2</td>
                        <td style="text-align:right; padding-right: 20px;">@_Quantity</td>
                        <td style="text-align:right; padding-right: 50px;">@_Rate</td>
                        <td style="text-align:right; padding-right: 50px;">@_Amount</td>
                        <td style="text-align:right; padding-right: 50px;">@_TaxAmount</td>
                        <td style="text-align:right; padding-right: 50px;">@_NetAmount</td>
                        <td>
                            <button type="submit" @onclick='()=> Edit((long)Row["ID"])' class="btn btn-link btn-My"><i class="bi bi-pencil"></i></button>
                            |<button type="submit" @onclick='() => Delete((long)Row["ID"])' class="btn btn-dangerous"><i class="bi bi-trash3" style=" color: red;margin-right:5px"></i></button>
                        </td>
                        <td></td>

                    </tr>
                }


            }




        </tbody>
        <tfoot>
            <tr>
                <td></td>
                <td></td>
                <td></td>
                <td>Total</td>
                <td>@TotQty</td>
                <td>@TotRate</td>
                <td>@TotAmount</td>
                <td>@TotTaxAmount</td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
        </tfoot>
    </table>
</div>